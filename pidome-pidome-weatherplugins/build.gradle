apply plugin: 'java'
apply plugin: 'maven'

String mavenGroupId = 'org.pidome.platform.server.packages.native.plugins.weather'
String mavenVersion = '0.1-SNAPSHOT'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
    resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    maven {
        url "http://builder.pidome.org:9000/repository/pidome-platform-shared-libraries/"
    }
    mavenCentral()
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
    resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

configurations {
    publishJar
}

jar.doFirst {
    manifest {
        attributes('Manifest-Version': '1.0',
               'Sealed': true,
               'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
               'Built-With': "gradle-${project.getGradle().getGradleVersion()}",
               'Build-Time': buildTime(),
               'Built-By': System.getProperty('user.name'),
               'Implementation-Title': rootProject.name,
               'Implementation-Version': System.getenv("ENV_CUSTOM_BUILD_VERSION") ?: "TEST-NO-PROD",
               'Implementation-Vendor': System.getenv("ENV_CUSTOM_VENDOR") ?: "Unknown",
        )
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    compile "org.pidome.platform:pidome-server-connector:0.1-SNAPSHOT"
    compile "org.pidome.platform.libraries.shared:joda-time:2.2"
    publishJar mavenGroupId+":"+mavenArtifactId+":"+mavenVersion
}

uploadArchives {
    File pubPropFile = new File("../../private/maven-deploy-props.properties")
    if(pubPropFile.exists()) {
        Properties deployProps = new Properties()
        deployProps.load(new FileInputStream(pubPropFile))
        repositories.mavenDeployer {
            configuration = configurations.publishJar
            repository(url: "http://builder.pidome.org:9000/repository/pidome-platform-shared-libraries/") {
                authentication(userName: deployProps['archuser'], password: deployProps['archpass'])
            }
        }
    }
}