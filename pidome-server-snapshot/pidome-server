#!/bin/bash
# Start/stop the pidome-server daemon.
#
### BEGIN INIT INFO
# Provides:          pidome-server
# Required-Start:    $local_fs $network $time
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: PiDome Home Automation/Domotica server.
# Description:       pidome-server provides booting of the PiDome server
#                    which is an open source home automation/domotica system.
#                    More info a http://pidome.org
### END INIT INFO


. /lib/lsb/init-functions

ROUNDTRIP=0

RETVAL=0
PROG=pidome-server
PIDFILE=/var/run/pidome.pid

PIDOME_LOC=/opt/pidome/pidome-server
JAVA_LOC=/jre/bin/java

if [ -f $PIDFILE ]; then
    CurPID=$(<"$PIDFILE")
else
    CurPID=UNKNOWN
fi

start() {
    if [ -f $PIDFILE ]; then
        echo "Failed starting. Server already running or a stale pid file present. Use 'stop' to remove or 'restart' to restart the server."
        RETVAL=1
    else
        if [ -f $PIDOME_LOC/initial.log ]; then
            rm $PIDOME_LOC/initial.log
        fi
        if [ -f $PIDOME_LOC/pidome-server.jar ]; then
            echo -n "Initializing PiDome server, please wait for server start..."
            cd $PIDOME_LOC
            chmod 755 $PIDOME_LOC$JAVA_LOC
            nohup $PIDOME_LOC$JAVA_LOC -XshowSettings:properties -Dlog4j.configurationFile=config/log4j2.xml -Djava.awt.headless=true -Dfile.encoding="UTF-8" -jar pidome-server.jar >initial.log 2>&1 &
            if [ $? -eq 0 ]; then
                while [ ! -f $PIDFILE ]
                do
                    sleep 1
                    echo -n "."
                    (( ROUNDTRIP += 1 ))
                    if [ $ROUNDTRIP == 25 ]; then
                        echo " failed."
                        exit 1
                    fi
                done
                echo " starting up."
                RETVAL=0
            else 
                echo " failed starting."
                RETVAL=1
            fi
        else 
            echo "Make sure pidome is installed in $PIDOME_LOC/."
            RETVAL=1
        fi
    fi
}

stop() {
    if [ -f $PIDFILE ]; then
        CurPID=$(<"$PIDFILE")
        echo -n "Stopping PiDome server, please wait... "
        if ps -p $CurPID > /dev/null
        then
            kill -TERM $CurPID
            RETVAL=$?
        fi
        echo -n "removing PID file $PIDFILE, "
        rm $PIDFILE
        echo "done."
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 1
        start
        ;;
    force-reload)
        stop
        sleep 1
        start
        ;;
    status)
        if [ -f $PIDFILE ]; then
            echo -n "PiDome running: $PIDFILE, pid number: $CurPID"
        else
            echo -n "PiDome not running"
        fi
        echo
        RETVAL=2
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|status}"
        RETVAL=3
esac
exit $RETVAL